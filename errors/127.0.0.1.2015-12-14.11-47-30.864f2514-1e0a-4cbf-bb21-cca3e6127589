(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/sanket/courier_portal/gluon/dal/base.py", line 395, in __init__\n    self._dbname = REGEX_DBNAME.match(uri).group()\nAttributeError: \'NoneType\' object has no attribute \'group\'\n'
p3
sS'layer'
p4
S'/home/sanket/courier_portal/applications/IIIT_courier_portal/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('\tmysql://root:mysql0211@localhost/test',pool_size=0)\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\nimport os\nfrom gluon.tools import Auth, Service, PluginManager\nfrom plugin_notemptymarker import mark_not_empty, unmark_not_empty\n\nauth = Auth(db)\n\nauth.settings.actions_disabled.append('profile')\nauth.settings.password_min_length= 4\nauth.settings.change_password_next=URL('password')\nservice = Service()\nplugins = PluginManager()\n\nauth.settings.extra_fields['auth_user']=[Field('Roll_No','integer',requires=IS_NOT_EMPTY()),Field('Wallet','integer',default='0',requires=IS_INT_IN_RANGE()),Field('Hostel',requires=IS_IN_SET({'OBH','OBH-D','OBH-E','NBH','BAKUL','GH','GHEB','NBH Cellar'})),Field('Room_No',requires=IS_NOT_EMPTY()),Field('Contact_No',requires=IS_MATCH('[1-9][0-9]{9}')),Field('Photo','upload',uploadfield=True,default=os.path.join(request.folder,'static','images','Edit_user-512.png'))]\n\n\n\n\n##auth=mark_not_empty(db.auth_user)\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n###\nat = Auth(db)\nat.settings.actions_disabled.append('profile')\nat.settings.password_min_length= 4\nat.settings.change_password_next=URL('password')\nservice = Service()\nplugins = PluginManager()\nat.define_tables(username=False, signature=False)\n###\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'smtp.gmail.com:587'\nmail.settings.sender = 'courieriiit243@gmail.com'\nmail.settings.login = 'courieriiit243:sanketaagam'\n\n## configure auth policy\nauth.settings.table_user.email.requires=[IS_MATCH('.*@.*\\.iiit\\.ac\\.in'),IS_NOT_IN_DB(db,auth.settings.table_user.email)]\nauth.settings.registration_requires_verification = True\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n###\nat.settings.table_user.email.requires=[IS_MATCH('.*@.*\\.iiit\\.ac\\.in'),IS_NOT_IN_DB(db,at.settings.table_user.email)]\nat.settings.registration_requires_verification = False\nat.settings.registration_requires_approval = False\nat.settings.reset_password_requires_verification = True\n###\n\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.janrain_account import use_janrain\nuse_janrain(auth, filename='private/janrain.key')\n\n###\nfrom gluon.contrib.login_methods.janrain_account import use_janrain\nuse_janrain(at, filename='private/janrain.key')\n###\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\ndb.define_table('cash',Field('email',requires=IS_IN_DB(db,auth.settings.table_user.email)),Field('Add_Or_Subtract',requires=IS_IN_SET({'+','-'})),Field('Transaction_Amount','integer'))\n#db.cash.Add_Or_Subtract.requires=[IS_IN_SET({'+','-'})]\n\ndb.define_table('passkey',Field('passkey',requires=IS_NOT_EMPTY()))\ndb.define_table('edit1',Field('Edit_Photo','upload',uploadfield=True))\n##db.passkey.passkey.requires= [IS_MATCH('hello')]\n##db.passkey.passkey.requires=[IS_MATCH('hello')]\ndb.define_table('roo',Field('Edit_Room_No'))\ndb.define_table('hoste',Field('Edit_Hostel',requires=IS_IN_SET({'OBH','OBH-D','OBH-E','NBH','BAKUL','GH','GHEB','NBH Cellar'})))\ndb.define_table('contac',Field('Edit_Number',requires=IS_MATCH('[1-9][0-9]{9}')))\ndb.define_table('anonymousprofile',Field('first_name',requires=IS_NOT_EMPTY()),Field('last_name',requires=IS_NOT_EMPTY()))\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sanket/courier_portal/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/sanket/courier_portal/applications/IIIT_courier_portal/models/db.py", line 14, in <module>\n    db = DAL(\'\tmysql://root:mysql0211@localhost/test\',pool_size=0)\n  File "/home/sanket/courier_portal/gluon/dal/base.py", line 432, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/sanket/courier_portal/gluon/dal/base.py", line 395, in __init__\n    self._dbname = REGEX_DBNAME.match(uri).group()\nAttributeError: \'NoneType\' object has no attribute \'group\'\n\n'
p11
s.